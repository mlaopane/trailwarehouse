<?php

namespace TrailWarehouse\AppBundle\Repository;
use TrailWarehouse\AppBundle\Entity\Family;
use TrailWarehouse\AppBundle\Entity\Product;
use Doctrine\ORM\Query;
use Doctrine\DBAL\Connection;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends CommonRepository
{
  /**
   * Get all Entities
   *
   * @return Array of arrays
   */
  public function getAll() {
    return $this->getBuilder()
      ->getQuery()
      ->getArrayResult()
    ;
  }

  public function getOneRand() {
    return $this->getBuilder()
      ->addSelect('RAND() as HIDDEN rand')
      ->addOrderBy('rand')
      ->setMaxResults(1)
      ->getQuery()
      ->getOneOrNullResult(Query::HYDRATE_ARRAY)
    ;
  }

  /**
   * Get one Entity
   *
   * @return Array
   */
  public function getOneBy($field, $value) {
    return $this->getBuilder()
      ->where('product.'.$field.' = :value')
      ->setParameter('value', $value)
      ->setMaxResults(1)
      ->getQuery()
      ->getOneOrNullResult(Query::HYDRATE_ARRAY)
    ;
  }

  public function getOneRandBy($field, $value) {
    return $this->getBuilder()
      ->addSelect('RAND() as HIDDEN rand')
      ->where('product.'.$field.' = :value')
      ->setParameter('value', $value)
      ->addOrderBy('rand')
      ->setMaxResults(1)
      ->getQuery()
      ->getOneOrNullResult(Query::HYDRATE_ARRAY)
    ;
  }

  public function getOneRandByFamily(Family $family) {
    return $this->getOneRandBy('family', $family);
  }

  /**
   * Get Entities by parameters
   *
   * @param Array $parameters
   *
   * @return Array of arrays
   */
  public function getBy(Array $parameters)
  {
    $builder = $this->getBuilder();
    foreach ($parameters as $field => $value) {
      $builder
        ->andWhere('product.'. $field .' = :'. $field)
        ->setParameter($field, $value)
      ;
    }
    return $builder
      ->getQuery()
      ->getArrayResult()
    ;
  }

  /**
   * @param string $field
   * @param Family|int|string $value
   * @return Array Array
   */
  public function getColorsBy($field, $value)
  {
    return $this->_em->createQueryBuilder()
      ->select('color.name, color.value')
      ->from($this->_entityName, 'product')
      ->innerJoin('product.color', 'color')
      ->where('product.'. $field .' = :value')
      ->setParameter('value', $value)
      ->groupBy('product.color')
      ->getQuery()
      ->getArrayResult()
    ;
  }

  /**
   * @param Family $family
   * @return Array Array
   */
  public function getColorsByFamily(Family $family)
  {
    return $this->getColorsBy('family', $family);
  }

  /**
   * @param string $field
   * @param mixed $value
   *
   * @return Array Array
   */
  public function getSizesBy($field, $value)
  {
    return $this->_em->createQueryBuilder()
      ->select('size.value')->from($this->_entityName, 'product')
      ->innerJoin('product.size', 'size')
      ->where('product.'. $field .' = :'. $field)
      ->setParameter($field, $value)
      ->groupBy('product.size')
      ->getQuery()
      ->getArrayResult()
    ;
  }

  /**
   * @param Family $family
   *
   * @return Array Array
   */
  public function getSizesByFamily(Family $family)
  {
    return $this->getSizesBy('family', $family);
  }

  /**
   * Get Builder
   *
   * @return QueryBuilder (with joined entities)
   */
  private function getBuilder() {
    return $this->createQueryBuilder('product')
      ->addSelect('family, color, size, brand, category')
      ->innerJoin('product.family', 'family')
      ->innerJoin('product.color', 'color')
      ->innerJoin('product.size', 'size')
      ->innerJoin('family.brand', 'brand')
      ->innerJoin('family.category', 'category')
    ;
  }

}
