<?php

namespace TrailWarehouse\AppBundle\Repository;
use TrailWarehouse\AppBundle\Entity\Family;
use TrailWarehouse\AppBundle\Entity\Product;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Doctrine\DBAL\Connection;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends CommonRepository
{
  /**
   * Get all Entities
   *
   * @return Array of arrays
   */
  public function getAll($as_array = true) {
    return $this->getBuilder()
      ->getQuery()
      ->getArrayResult()
    ;
  }

  /**
   * Get one random product
   *
   * @return Array|Object|NULL
   */
  public function getOneRand($as_array = true) {
    return $this->getBuilder()
      ->addSelect('RAND() as HIDDEN rand')
      ->addOrderBy('rand')
      ->setMaxResults(1)
      ->getQuery()
      ->getOneOrNullResult(Query::HYDRATE_ARRAY)
    ;
  }

  /**
   * Get the best Product of a Family
   *
   * @param Family $family
   * @param bool $as_array
   *
   * @return Array|Object|NULL
   */
  public function getBest(Family $family, $as_array = true) {
    $query = $this->getBuilder()
      ->andWhere('product.family = :family')
      ->andWhere('product.stock > 0')
      ->addOrderBy('family.averageRating', 'desc')
      ->addOrderBy('product.stock', 'asc')
      ->setParameter('family', $family)
      ->setMaxResults(1)
      ->getQuery()
    ;
    return $as_array ? $query->getOneOrNullResult(Query::HYDRATE_ARRAY) : $query->getOneOrNullResult();
  }

  /**
   * Get one Entity
   *
   * @return Array
   */
  public function getOneBy($field, $value, $as_array = true) {
    $query = $this->getBuilder()
      ->where('product.'.$field.' = :value')
      ->setParameter('value', $value)
      ->setMaxResults(1)
      ->getQuery()
    ;
    return $as_array ? $query->getOneOrNullResult(Query::HYDRATE_ARRAY) : $query->getOneOrNullResult();
  }

  public function getOneRandBy($field, $value, $as_array = true) {
    return $this->getBuilder()
      ->addSelect('RAND() as HIDDEN rand')
      ->where('product.'.$field.' = :value')
      ->setParameter('value', $value)
      ->addOrderBy('rand')
      ->setMaxResults(1)
      ->getQuery()
      ->getOneOrNullResult(Query::HYDRATE_ARRAY)
    ;
  }

  public function getOneRandByFamily(Family $family, $as_array = true) {
    return $this->getOneRandBy('family', $family, $as_array);
  }

  /**
   * Get Entities by parameters
   *
   * @param Array $parameters
   *
   * @return Array of arrays
   */
  public function getByArray(Array $parameters, $as_array = true)
  {
    $builder = $this->getBuilder();
    foreach ($parameters as $field => $value) {
      $builder
        ->andWhere('product.'. $field .' = :'. $field)
        ->setParameter($field, $value)
      ;
    }
    return $builder
      ->getQuery()
      ->getArrayResult()
    ;
  }

  /**
   * @param string $field
   * @param Family|int|string $value
   * @return Array Array
   */
  public function getColorsBy($field, $value, $as_array = true)
  {
    return $this->_em->createQueryBuilder()
      ->select('color.id, color.name, color.value')
      ->from($this->_entityName, 'product')
      ->innerJoin('product.color', 'color')
      ->where('product.'. $field .' = :value')
      ->setParameter('value', $value)
      ->groupBy('product.color')
      ->getQuery()
      ->getArrayResult()
    ;
  }

  /**
   * @param Family $family
   * @return Array Array
   */
  public function getColorsByFamily(Family $family, $as_array = true)
  {
    return $this->getColorsBy('family', $family);
  }

  /**
   * @param string $field
   * @param mixed $value
   *
   * @return Array Array
   */
  public function getSizesBy($field, $value, $as_array = true)
  {
    return $this->_em->createQueryBuilder()
      ->select('size.id, size.value, size.unitShortcut')
      ->from($this->_entityName, 'product')
      ->innerJoin('product.size', 'size')
      ->where('product.'. $field .' = :value')
      ->setParameter('value', $value)
      ->groupBy('product.size')
      ->getQuery()
      ->getArrayResult()
    ;
  }

  /**
   * @param Family $family
   *
   * @return Array Array
   */
  public function getSizesByFamily(Family $family, $as_array = true)
  {
    return $this->getSizesBy('family', $family);
  }

  /**
   * Get Builder
   *
   * @return QueryBuilder (with joined entities)
   */
  protected function getBuilder(): QueryBuilder
  {
    return $this->createQueryBuilder('product')
      ->addSelect('family, color, size, category, brand')
      ->innerJoin('product.family', 'family')
      ->innerJoin('family.category', 'category')
      ->innerJoin('family.brand', 'brand')
      ->leftJoin('product.color', 'color')
      ->leftJoin('product.size', 'size')
    ;
  }

}
